generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  role         Role           @default(CLIENT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminChats   Chat[]         @relation("AdminChats")
  clientChats  Chat[]         @relation("ClientChats")
  messages     Message[]
  profile      Profile?
  refreshTokens RefreshToken[]
  // readMessages Message[] @relation("MessageReads")

  @@map("users")
}

model Program {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  parentId           String?
  descriptionEn      String?
  descriptionRu      String?
  descriptionUz      String?
  titleEn            String?
  titleRu            String
  titleUz            String
  parent             Program?            @relation("ProgramToProgram", fields: [parentId], references: [id])
  children           Program[]           @relation("ProgramToProgram")
  universityPrograms UniversityProgram[]
  applications      Application[]

  @@map("programs")
}

model Country {
  code         Int          @id
  nameUz       String
  nameRu       String
  nameEn       String
  isMain       Boolean      @default(false)
  photoUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cities       City[]
  universities University[]
}

model City {
  id            String       @id @default(uuid())
  nameUz        String
  nameRu        String
  nameEn        String
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  countryCode   Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  country       Country      @relation(fields: [countryCode], references: [code])
  universities  University[]
}

model University {
  id                   String                 @id @default(uuid())
  established          Int?
  type                 String
  descriptionUz        String?
  descriptionRu        String?
  descriptionEn        String?
  website              String?
  email                String?
  phone                String?
  address              String
  winterIntakeDeadline DateTime?
  autumnIntakeDeadline DateTime?
  ranking              Int?
  studentsCount        Int?
  acceptanceRate       Float?
  avgApplicationFee    Float?
  photoUrl             String?
  isMain               Boolean                @default(false)
  cityId               String
  countryCode          Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String
  city                 City                   @relation(fields: [cityId], references: [id])
  country              Country                @relation(fields: [countryCode], references: [code])
  universityPrograms   UniversityProgram[]
  applications         Application[]
  requirements         UniversityRequirements?

  @@map("universities")
}

model UniversityRequirements {
  id                            String     @id @default(uuid())
  universityId                  String     @unique
  university                    University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  minIeltsScore                 Float?
  minToeflScore                 Int?
  minDuolingoScore              Int?
  requiredDegree                DegreeType?
  minGpa                        Float?
  minGmatScore                  Int?
  minCatScore                   Int?
  requiredRecommendationLetters Int?       @default(0)
  otherRequirements             Json?
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt

  @@map("university_requirements")
}

model UniversityProgram {
  id                 String     @id @default(uuid())
  universityId       String
  programId          String
  tuitionFee         Float
  tuitionFeeCurrency String     @default("USD")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  program            Program    @relation(fields: [programId], references: [id])
  university         University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@unique([universityId, programId])
  @@index([universityId])
  @@index([programId])
  @@map("university_programs")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
}

model Chat {
  id        String     @id @default(uuid())
  clientId  String
  adminId   String?
  status    ChatStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     User?      @relation("AdminChats", fields: [adminId], references: [id])
  client    User       @relation("ClientChats", fields: [clientId], references: [id])
  messages  Message[]

  @@index([clientId])
  @@index([adminId])
  @@index([status])
}

model Message {
  id        String        @id @default(uuid())
  chatId    String
  senderId  String
  text      String?
  fileUrl   String?
  replyToId String?
  readByClient Boolean @default(false)
  readByAdmin Boolean @default(false)
  isEdited  Boolean       @default(false)
  editedAt  DateTime?
  status    MessageStatus @default(SENT)
  createdAt DateTime      @default(now())
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo   Message?      @relation("Replies", fields: [replyToId], references: [id])
  replies   Message[]     @relation("Replies")
  sender    User          @relation(fields: [senderId], references: [id])
  // readBy    User[]    @relation("MessageReads")

  @@index([chatId])
  @@index([senderId])
  @@index([replyToId])
}

model Profile {
  id                       String              @id @default(uuid())
  firstName                String?
  lastName                 String?
  passportSeriesAndNumber  String?
  email                    String?
  phoneNumber              String?
  userId                   String              @unique
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  address                  String?
  dateOfBirth              DateTime?
  gender                   Gender?
  middleName               String?
  nationality              String?
  passportCopyGuid         String?
  passportExpiryDate       DateTime?
  cvGuid                   String?
  motivationLetterGuid     String?
  recommendationLetterGuids String[]           @default([])
  applications             Application[]
  user                     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationHistory         Education[]
  languageCertificates     LanguageCertificate[]
  standardizedTests        StandardizedTest[]

  @@map("profiles")
}

model StandardizedTest {
  id             String               @id @default(uuid())
  profileId      String
  profile        Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  testType       StandardizedTestType
  score          Int
  certificateGuid String?
  dateOfIssue    DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@map("standardized_tests")
  @@index([profileId])
}

model Education {
  id             String     @id @default(uuid())
  profileId      String
  profile        Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  degree         DegreeType
  institution    String
  graduationYear Int
  gpa            Float?
  transcriptGuid String?
  diplomaGuid    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("education_history")
  @@index([profileId])
}

model LanguageCertificate {
  id             String       @id @default(uuid())
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  testType       LanguageTest
  score          Float
  certificateGuid String?
  dateOfIssue    DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("language_certificates")
  @@index([profileId])
}

model Application {
  id                  String            @id @default(uuid())
  profileId           String
  preferredCountry    String
  preferredUniversity String
  preferredProgram    String
  intakeSeason        IntakeSeason
  intakeYear          Int
  applicationStatus   ApplicationStatus @default(DRAFT)
  rejectionReason     String?
  submittedAt         DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  profile             Profile           @relation(fields: [profileId], references: [id])
  program             Program           @relation(fields: [preferredProgram], references: [id])
  university          University        @relation(fields: [preferredUniversity], references: [id])
  @@index([profileId])
  @@index([applicationStatus])
  @@map("applications")
}

model MiniApplication {
  id          String                @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  status      MiniApplicationStatus @default(NEW)

  @@index([email])
  @@index([status])
  @@map("mini_applications")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

enum Role {
  ADMIN
  CLIENT
  PARTNER
}

enum UniversityType {
  PUBLIC
  PRIVATE
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum IntakeSeason {
  FALL
  SPRING
  SUMMER
}

enum LanguageTest {
  IELTS
  TOEFL
  DUOLINGO
  NONE
}

enum DegreeType {
  HIGH_SCHOOL
  BACHELOR
  MASTER
  PHD
}

enum StandardizedTestType {
  GMAT
  CAT
  GRE
}

enum Gender {
  MALE
  FEMALE
}

enum MiniApplicationStatus {
  NEW
  CONTACTED
  CLOSED
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
}
