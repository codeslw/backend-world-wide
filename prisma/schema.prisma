generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientChats Chat[]    @relation("ClientChats")
  adminChats  Chat[]    @relation("AdminChats")
  messages    Message[]
  @@map("users")
}

enum Role {
  ADMIN
  CLIENT
  PARTNER
}

model Program {
  id          String    @id @default(uuid())
  titleUz     String
  titleRu     String
  titleEn     String?
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Parent-child relationship
  parentId    String?
  parent      Program?  @relation("ProgramToProgram", fields: [parentId], references: [id])
  children    Program[] @relation("ProgramToProgram")

  universities University[]

  @@map("programs")
}

model Country {
  code      Int      @id
  nameUz    String
  nameRu    String
  nameEn    String
  cities    City[]
  universities University[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id            String       @id @default(uuid())
  nameUz        String
  nameRu        String
  nameEn        String
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  countryCode   Int
  country       Country      @relation(fields: [countryCode], references: [code])
  universities  University[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model University {
  id                    String   @id @default(uuid())
  nameUz                String
  nameRu                String
  nameEn                String
  established           Int
  type                  String
  descriptionUz         String
  descriptionRu         String
  descriptionEn         String
  website               String
  email                 String
  phone                 String
  address               String
  winterIntakeDeadline  DateTime?
  autumnIntakeDeadline  DateTime?
  ranking               Int
  studentsCount         Int
  acceptanceRate        Float
  avgApplicationFee     Float
  tuitionFeeMin         Float
  tuitionFeeMax         Float
  tuitionFeeCurrency    String?  @default("USD")
  photoUrl              String?
  cityId                String
  city                  City     @relation(fields: [cityId], references: [id])
  countryCode           Int
  country               Country  @relation(fields: [countryCode], references: [code])
  programs              Program[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum UniversityType {
  PUBLIC
  PRIVATE
}

model File {
  id        String      @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

model Chat {
  id        String     @id @default(uuid())
  clientId  String        // Reference to User model
  client    User       @relation("ClientChats", fields: [clientId], references: [id])
  adminId   String?       // Optional admin ID (null until assigned)
  admin     User?      @relation("AdminChats", fields: [adminId], references: [id])
  status    ChatStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  messages  Message[]

  @@index([clientId])
  @@index([adminId])
  @@index([status])
}

model Message {
  id         String    @id @default(uuid())
  chatId     String
  chat       Chat      @relation(fields: [chatId], references: [id])
  senderId   String       // Reference to User model
  sender     User      @relation(fields: [senderId], references: [id])
  text       String?
  fileUrl    String?
  replyToId  String?   // Self-reference for replies
  replyTo    Message?  @relation("Replies", fields: [replyToId], references: [id])
  replies    Message[] @relation("Replies")
  createdAt  DateTime  @default(now())
  
  @@index([chatId])
  @@index([senderId])
  @@index([replyToId])
}