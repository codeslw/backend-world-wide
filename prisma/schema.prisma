generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientChats Chat[]    @relation("ClientChats")
  adminChats  Chat[]    @relation("AdminChats")
  messages    Message[]
  readMessages Message[] @relation("MessageReads")
  profile    Profile?
  @@map("users")
}

enum Role {
  ADMIN
  CLIENT
  PARTNER
}

model Program {
  id          String    @id @default(uuid())
  titleUz     String
  titleRu     String
  titleEn     String?
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Parent-child relationship
  parentId    String?
  parent      Program?  @relation("ProgramToProgram", fields: [parentId], references: [id])
  children    Program[] @relation("ProgramToProgram")

  // Removed direct relation to University
  // universities University[] 
  universityPrograms UniversityProgram[] // Relation to the join table

  @@map("programs")
}

model Country {
  code      Int      @id
  nameUz    String
  nameRu    String
  nameEn    String
  cities    City[]
  universities University[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id            String       @id @default(uuid())
  nameUz        String
  nameRu        String
  nameEn        String
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  countryCode   Int
  country       Country      @relation(fields: [countryCode], references: [code])
  universities  University[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model University {
  id                    String   @id @default(uuid())
  nameUz                String
  nameRu                String
  nameEn                String
  established           Int
  type                  String // Consider changing to UniversityType enum if values are fixed
  descriptionUz         String
  descriptionRu         String
  descriptionEn         String
  website               String
  email                 String
  phone                 String
  address               String
  winterIntakeDeadline  DateTime?
  autumnIntakeDeadline  DateTime?
  ranking               Int
  studentsCount         Int
  acceptanceRate        Float
  avgApplicationFee     Float
  // Removed university-wide tuition fields
  // tuitionFeeMin         Float 
  // tuitionFeeMax         Float
  // tuitionFeeCurrency    String?  @default("USD")
  photoUrl              String?
  cityId                String
  city                  City     @relation(fields: [cityId], references: [id])
  countryCode           Int
  country               Country  @relation(fields: [countryCode], references: [code])
  // Removed direct relation to Program
  // programs              Program[] 
  universityPrograms    UniversityProgram[] // Relation to the join table
  miniApplications    MiniApplication[]   // Relation to MiniApplication
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("universities") // Added map explicitly
}

// New join table for University-Program relationship with tuition fees
model UniversityProgram {
  id                 String   @id @default(uuid())
  universityId       String
  university         University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  programId          String
  program            Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  tuitionFee         Float
  tuitionFeeCurrency String   @default("USD")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([universityId, programId]) // Ensure a program is added only once per university
  @@index([universityId])
  @@index([programId])
  @@map("university_programs")
}

enum UniversityType {
  PUBLIC
  PRIVATE
}

model File {
  id        String      @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

model Chat {
  id        String     @id @default(uuid())
  clientId  String        // Reference to User model
  client    User       @relation("ClientChats", fields: [clientId], references: [id])
  adminId   String?       // Optional admin ID (null until assigned)
  admin     User?      @relation("AdminChats", fields: [adminId], references: [id])
  status    ChatStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  messages  Message[]

  @@index([clientId])
  @@index([adminId])
  @@index([status])
}

model Message {
  id         String    @id @default(uuid())
  chatId     String
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId   String       // Reference to User model
  sender     User      @relation(fields: [senderId], references: [id])
  text       String?
  fileUrl    String?
  replyToId  String?   // Self-reference for replies
  replyTo    Message?  @relation("Replies", fields: [replyToId], references: [id])
  replies    Message[] @relation("Replies")
  createdAt  DateTime  @default(now())
  readBy     User[]    @relation("MessageReads")
  
  @@index([chatId])
  @@index([senderId])
  @@index([replyToId])
}

model Profile {
  id                     String   @id @default(uuid())
  firstName              String
  lastName               String
  yearOfBirth            Int?
  passportSeriesAndNumber String?
  email                  String?
  phoneNumber            String?
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  applications           Application[]

  @@map("profiles")
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum IntakeSeason {
  FALL
  SPRING
  SUMMER
}

enum LanguageTest {
  IELTS
  TOEFL
  DUOLINGO
  NONE
}

enum Gender {
  MALE
  FEMALE
}

model Application {
  id                     String            @id @default(uuid())
  // Personal Information linked to profile
  profileId              String
  profile                Profile           @relation(fields: [profileId], references: [id])
  middleName             String?
  dateOfBirth            DateTime
  gender                 Gender?
  nationality            String
  address                String
  
  // Passport Information
  passportNumber         String
  passportExpiryDate     DateTime
  passportCopyUrl        String
  
  // Education Information
  currentEducationLevel  String
  currentInstitutionName String?
  graduationYear         Int?
  transcriptUrl          String?
  
  // Language Proficiency
  languageTest           LanguageTest?
  languageScore          String?
  languageCertificateUrl String?
  
  // University Preferences
  preferredCountry       String
  preferredUniversity    String
  preferredProgram       String
  intakeSeason           IntakeSeason
  intakeYear             Int
  
  // Additional Documents
  motivationLetterUrl    String?
  recommendationLetterUrls String[]
  cvUrl                  String?
  
  // Meta
  applicationStatus      ApplicationStatus @default(DRAFT)
  submittedAt            DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  
  @@map("applications")
  @@index([profileId])
  @@index([applicationStatus])
}

enum MiniApplicationStatus {
  NEW
  CONTACTED
  CLOSED
}

model MiniApplication {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  email        String
  phoneNumber  String
  universityId String
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade) // Relation to University
  status       MiniApplicationStatus @default(NEW)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("mini_applications")
  @@index([universityId])
  @@index([email]) // Add index for potential lookup by email
  @@index([status]) // Add index for status
}