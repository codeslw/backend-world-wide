generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  role         Role      @default(CLIENT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminChats   Chat[]    @relation("AdminChats")
  clientChats  Chat[]    @relation("ClientChats")
  messages     Message[]
  profile      Profile?
  readMessages Message[] @relation("MessageReads")

  @@map("users")
}

model Program {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  parentId           String?
  descriptionEn      String?
  descriptionRu      String?
  descriptionUz      String?
  titleEn            String?
  titleRu            String
  titleUz            String
  parent             Program?            @relation("ProgramToProgram", fields: [parentId], references: [id])
  children           Program[]           @relation("ProgramToProgram")
  universityPrograms UniversityProgram[]

  @@map("programs")
}

model Country {
  code         Int          @id
  nameUz       String
  nameRu       String
  nameEn       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  cities       City[]
  universities University[]
}

model City {
  id            String       @id @default(uuid())
  nameUz        String
  nameRu        String
  nameEn        String
  descriptionUz String?
  descriptionRu String?
  descriptionEn String?
  countryCode   Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  country       Country      @relation(fields: [countryCode], references: [code])
  universities  University[]
}

model University {
  id                   String              @id @default(uuid())
  established          Int?
  type                 String
  descriptionUz        String?
  descriptionRu        String?
  descriptionEn        String?
  website              String
  email                String?
  phone                String?
  address              String
  winterIntakeDeadline DateTime?
  autumnIntakeDeadline DateTime?
  ranking              Int
  studentsCount        Int
  acceptanceRate       Float
  avgApplicationFee    Float
  photoUrl             String?
  cityId               String
  countryCode          Int
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  name                 String
  city                 City                @relation(fields: [cityId], references: [id])
  country              Country             @relation(fields: [countryCode], references: [code])
  universityPrograms   UniversityProgram[]

  @@map("universities")
}

model UniversityProgram {
  id                 String     @id @default(uuid())
  universityId       String
  programId          String
  tuitionFee         Float
  tuitionFeeCurrency String     @default("USD")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  program            Program    @relation(fields: [programId], references: [id])
  university         University @relation(fields: [universityId], references: [id])

  @@unique([universityId, programId])
  @@index([universityId])
  @@index([programId])
  @@map("university_programs")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  url       String
  createdAt DateTime @default(now())
}

model Chat {
  id        String     @id @default(uuid())
  clientId  String
  adminId   String?
  status    ChatStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     User?      @relation("AdminChats", fields: [adminId], references: [id])
  client    User       @relation("ClientChats", fields: [clientId], references: [id])
  messages  Message[]

  @@index([clientId])
  @@index([adminId])
  @@index([status])
}

model Message {
  id        String    @id @default(uuid())
  chatId    String
  senderId  String
  text      String?
  fileUrl   String?
  replyToId String?
  createdAt DateTime  @default(now())
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo   Message?  @relation("Replies", fields: [replyToId], references: [id])
  replies   Message[] @relation("Replies")
  sender    User      @relation(fields: [senderId], references: [id])
  readBy    User[]    @relation("MessageReads")

  @@index([chatId])
  @@index([senderId])
  @@index([replyToId])
}

model Profile {
  id                       String        @id @default(uuid())
  firstName                String
  lastName                 String
  yearOfBirth              Int?
  passportSeriesAndNumber  String?
  email                    String?
  phoneNumber              String?
  userId                   String        @unique
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  address                  String?
  dateOfBirth              DateTime?
  gender                   Gender?
  middleName               String?
  nationality              String?
  passportCopyUrl          String?
  passportExpiryDate       DateTime?
  passportNumber           String?
  currentEducationLevel    String?
  currentInstitutionName   String?
  cvUrl                    String?
  graduationYear           Int?
  languageCertificateUrl   String?
  languageScore            String?
  languageTest             LanguageTest?
  motivationLetterUrl      String?
  recommendationLetterUrls String[]      @default([])
  transcriptUrl            String?
  applications             Application[]
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Application {
  id                  String            @id @default(uuid())
  profileId           String
  preferredCountry    String
  preferredUniversity String
  preferredProgram    String
  intakeSeason        IntakeSeason
  intakeYear          Int
  applicationStatus   ApplicationStatus @default(DRAFT)
  submittedAt         DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  profile             Profile           @relation(fields: [profileId], references: [id])

  @@index([profileId])
  @@index([applicationStatus])
  @@map("applications")
}

model MiniApplication {
  id          String                @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  status      MiniApplicationStatus @default(NEW)

  @@index([email])
  @@index([status])
  @@map("mini_applications")
}

enum Role {
  ADMIN
  CLIENT
  PARTNER
}

enum UniversityType {
  PUBLIC
  PRIVATE
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum IntakeSeason {
  FALL
  SPRING
  SUMMER
}

enum LanguageTest {
  IELTS
  TOEFL
  DUOLINGO
  NONE
}

enum Gender {
  MALE
  FEMALE
}

enum MiniApplicationStatus {
  NEW
  CONTACTED
  CLOSED
}
