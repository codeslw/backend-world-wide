version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    name: world-wide-postgres-data
    labels:
      keep: "true"


services:
  api:
    container_name: world-wide-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/world-wide-db?schema=public
      - SHADOW_DATABASE_URL=postgresql://postgres:password@postgres:5432/world-wide-shadow?schema=public
      - JWT_SECRET=${JWT_SECRET:-ww2024secretjz}
      - DIGITAL_OCEAN_ACCESS_KEY=${DIGITAL_OCEAN_ACCESS_KEY}
      - DIGITAL_OCEAN_SECRET_KEY=${DIGITAL_OCEAN_SECRET_KEY}
      - DIGITAL_OCEAN_BUCKET=${DIGITAL_OCEAN_BUCKET}
      - DIGITAL_OCEAN_ENDPOINT=${DIGITAL_OCEAN_ENDPOINT}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    container_name: world-wide-postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=world-wide-db
      - POSTGRES_INITDB_ARGS=--locale=C --encoding=UTF8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
