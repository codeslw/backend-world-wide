name: Deploy to Digital Ocean

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.DROPLET_USER }}/backend-world-wide
            git pull origin master
            
            # Set environment variables securely
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export DIGITAL_OCEAN_ACCESS_KEY="${{ secrets.DIGITAL_OCEAN_ACCESS_KEY }}"
            export DIGITAL_OCEAN_SECRET_KEY="${{ secrets.DIGITAL_OCEAN_SECRET_KEY }}"
            export DIGITAL_OCEAN_BUCKET="${{ secrets.DIGITAL_OCEAN_BUCKET }}"
            export DIGITAL_OCEAN_ENDPOINT="${{ secrets.DIGITAL_OCEAN_ENDPOINT }}"
            
            # Stop existing containers
            docker-compose down
            
            # Pull latest images and rebuild
            docker-compose pull
            docker-compose up -d --build
            
            # Wait longer for containers to be healthy before running migrations
            echo "Waiting for database and API containers to be ready..."
            sleep 15
            
            # Verify database connection before running migrations
            docker-compose exec -T postgres pg_isready -U postgres || (echo "Database not ready!" && exit 1)
            
            # Run migrations safely (this is redundant with your command in docker-compose but adds extra safety)
            docker-compose exec -T api npx prisma migrate deploy
            
            # Remove db push command as it could cause issues
            # Verify app is running
            docker-compose ps

      - name: Cleanup Docker resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker system prune -af --filter "label!=keep"