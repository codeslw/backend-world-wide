# deploy.yml - Minimal version without backup complications
name: Deploy to Digital Ocean

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error
            
            echo "Deploying latest changes..."
            
            # Navigate to project directory
            cd /home/${{ secrets.DROPLET_USER }}/backend-world-wide

            #Cleanup before fetch
            echo "Cleaning up disk space..."
            docker system prune -af --volumes || true
            sudo journalctl --vacuum-time=3d || true
            
            # Pull latest changes
            echo "Fetching latest changes..."
            git -c safe.directory="$(pwd)" fetch --all
            git -c safe.directory="$(pwd)" reset --hard origin/master
            
            # Verify latest commit
            echo "Latest commit:"
            git log -1 --pretty=format:"%h - %an, %ar : %s"
            
            # Extract database credentials from DATABASE_URL
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
            
            # Parse the DATABASE_URL
            DB_STRING="${DATABASE_URL#postgresql://}"
            DB_MAIN="${DB_STRING%%\?*}"
            USER_PASS="${DB_MAIN%%@*}"
            POSTGRES_USER="${USER_PASS%%:*}"
            POSTGRES_PASSWORD="${USER_PASS#*:}"
            DB_PART="${DB_MAIN##*/}"
            POSTGRES_DB="${DB_PART}"
            
            # Use defaults if extraction failed
            POSTGRES_USER="${POSTGRES_USER:-postgres}"
            POSTGRES_DB="${POSTGRES_DB:-world-wide-db}"
            if [ -z "$POSTGRES_PASSWORD" ]; then
                POSTGRES_PASSWORD="password"
            fi
            
            echo "Database configuration ready"
            
            # Create .env file
            echo "Creating environment variables..."
            cat > .env << EOF
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            POSTGRES_USER=${POSTGRES_USER}
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            POSTGRES_DB=${POSTGRES_DB}
            DIGITAL_OCEAN_ACCESS_KEY=${{ secrets.DIGITAL_OCEAN_ACCESS_KEY }}
            DIGITAL_OCEAN_SECRET_KEY=${{ secrets.DIGITAL_OCEAN_SECRET_KEY }}
            DIGITAL_OCEAN_BUCKET=${{ secrets.DIGITAL_OCEAN_BUCKET }}
            DIGITAL_OCEAN_ENDPOINT=${{ secrets.DIGITAL_OCEAN_ENDPOINT }}
            SWAGGER_USER=${{ secrets.SWAGGER_USER }}
            SWAGGER_PASSWORD=${{ secrets.SWAGGER_PASSWORD }}
            EOF
            
            # Build new image
            echo "Building Docker image..."
            docker-compose build api
            
            # Run migrations
            echo "Running database migrations..."
            docker-compose run --rm api npx prisma migrate deploy || {
                echo "Migration failed or no new migrations to apply"
            }
            
            # Update containers
            echo "Updating containers..."
            docker-compose stop api || true
            docker-compose rm -f api || true
            docker-compose up -d api
            
            # Wait for API to be ready
            echo "Waiting for API to be ready..."
            for i in {1..30}; do
                if docker-compose exec -T api curl -sf http://localhost:3000/api/v1/health 2>/dev/null; then
                    echo "API is ready!"
                    break
                fi
                if [ $i -eq 30 ]; then
                    echo "Warning: API health check timed out"
                fi
                sleep 2
            done
            
            # Clean up old images
            echo "Cleaning up..."
            docker image prune -af --filter "until=24h" || true
            
            # Show status
            echo "=== Deployment Complete ==="
            docker-compose ps

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.DROPLET_USER }}/backend-world-wide
            
            echo "=== Verification ==="
            docker-compose ps
            
            echo ""
            if docker-compose exec -T api curl -sf http://localhost:3000/api/v1/health 2>/dev/null; then
                echo "✓ API is healthy"
            else
                echo "✗ API health check failed"
            fi
            
            if docker-compose exec -T postgres pg_isready -U postgres 2>/dev/null; then
                echo "✓ Database is ready"
            else
                echo "✗ Database check failed"
            fi