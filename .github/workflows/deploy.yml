# deploy.yml - Alternative version
name: Deploy to Digital Ocean

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error
            
            echo "Deploying latest changes..."
            
            # Define the project directory
            PROJECT_DIR="/home/${{ secrets.DROPLET_USER }}/backend-world-wide"
            
            # Navigate to project directory
            cd "$PROJECT_DIR"
            
            # Store current commit for rollback if needed
            PREVIOUS_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
            
            # Pull latest changes without needing git config
            # Use -c flag to pass config directly
            echo "Fetching latest changes..."
            git -c safe.directory="$PROJECT_DIR" fetch --all
            git -c safe.directory="$PROJECT_DIR" reset --hard origin/master
            
            # Alternative: If git still has issues, use this approach:
            # rm -rf .git/index.lock 2>/dev/null || true
            # GIT_TERMINAL_PROMPT=0 git fetch --all
            # GIT_TERMINAL_PROMPT=0 git reset --hard origin/master
            
            # Verify latest commit
            echo "Latest commit:"
            git log -1 --pretty=format:"%h - %an, %ar : %s"
            
            # Create .env file for docker-compose
            echo "Creating environment variables..."
            cat > .env << 'EOF'
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DIGITAL_OCEAN_ACCESS_KEY=${{ secrets.DIGITAL_OCEAN_ACCESS_KEY }}
            DIGITAL_OCEAN_SECRET_KEY=${{ secrets.DIGITAL_OCEAN_SECRET_KEY }}
            DIGITAL_OCEAN_BUCKET=${{ secrets.DIGITAL_OCEAN_BUCKET }}
            DIGITAL_OCEAN_ENDPOINT=${{ secrets.DIGITAL_OCEAN_ENDPOINT }}
            EOF
            
            # Verify critical environment variables
            if ! grep -q "^JWT_SECRET=." .env; then
                echo "ERROR: JWT_SECRET is not set in the environment variables."
                exit 1
            fi
            
            if ! grep -q "^POSTGRES_PASSWORD=." .env; then
                echo "ERROR: POSTGRES_PASSWORD is not set in the environment variables."
                exit 1
            fi
            
            # Optional: Create database backup
            echo "Creating database backup..."
            BACKUP_DIR="/home/${{ secrets.DROPLET_USER }}/backups"
            mkdir -p "$BACKUP_DIR"
            BACKUP_FILE="$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).sql"
            docker-compose exec -T postgres pg_dump -U postgres world-wide-db > "$BACKUP_FILE" 2>/dev/null || echo "Backup skipped (database might be starting)"
            
            # Build new image
            echo "Building new Docker image..."
            docker-compose build api
            
            # Run migrations
            echo "Running database migrations..."
            docker-compose run --rm api npx prisma migrate deploy || {
                echo "Migration failed! Rolling back..."
                if [ "$PREVIOUS_COMMIT" != "unknown" ]; then
                    git -c safe.directory="$PROJECT_DIR" reset --hard "$PREVIOUS_COMMIT"
                fi
                exit 1
            }
            
            # Update only API container (zero-downtime deployment)
            echo "Updating API container..."
            docker-compose stop api
            docker-compose rm -f api
            docker-compose up -d api
            
            # Wait for API to be ready
            echo "Waiting for API to be ready..."
            MAX_ATTEMPTS=30
            ATTEMPT=0
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                if docker-compose exec -T api curl -sf http://localhost:3000/api/v1/health 2>/dev/null; then
                    echo "API is ready!"
                    break
                fi
                ATTEMPT=$((ATTEMPT + 1))
                if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                    echo "API failed to start! Check logs:"
                    docker-compose logs --tail=50 api
                    exit 1
                fi
                sleep 2
            done
            
            # Clean up
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"
            
            # Clean old backups (keep last 7 days)
            find "$BACKUP_DIR" -name "backup-*.sql" -mtime +7 -delete 2>/dev/null || true
            
            # Show deployment status
            echo "=== Deployment Summary ==="
            docker-compose ps
            echo ""
            echo "Recent API logs:"
            docker-compose logs --tail=10 api
            echo ""
            echo "Deployment completed successfully!"

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.DROPLET_USER }}/backend-world-wide
            
            echo "=== Deployment Verification ==="
            echo "Current git commit:"
            git log -1 --pretty=format:"%h - %an, %ar : %s" 2>/dev/null || echo "Git info unavailable"
            
            echo ""
            echo "Container status:"
            docker-compose ps
            
            echo ""
            echo "API Health check:"
            if docker-compose exec -T api curl -sf http://localhost:3000/api/v1/health; then
                echo "✓ API is healthy"
            else
                echo "✗ API health check failed"
                exit 1
            fi
            
            echo ""
            echo "Database connection:"
            if docker-compose exec -T postgres pg_isready -U postgres; then
                echo "✓ Database is ready"
            else
                echo "✗ Database connection failed"
                exit 1
            fi